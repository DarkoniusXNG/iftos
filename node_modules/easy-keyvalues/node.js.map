{"version":3,"file":"node.js","sources":["../src/Comments.ts","../src/adapter.ts","../src/KeyValues.ts","../src/KeyValues3.ts","../src/node.ts"],"sourcesContent":["export class KeyValuesComments {\n    constructor(\n        protected comments: string[] = [],\n        protected endOfLineComment: string = '',\n    ) {}\n\n    public GetComments(): string[] {\n        return this.comments;\n    }\n\n    public HasComments() {\n        return this.comments.length > 0;\n    }\n\n    public SetComments(list: string[]) {\n        for (const v of list) {\n            if (v.includes('\\n')) {\n                throw Error('The comment only allowed one line');\n            }\n        }\n        this.comments = list;\n        return this;\n    }\n\n    public AppendComment(text: string) {\n        if (text.includes('\\n')) {\n            throw Error('The comment only allowed one line');\n        }\n        this.comments.push(text);\n        return this;\n    }\n\n    public SetEndOfLineComment(text: string) {\n        if (text.includes('\\n')) {\n            throw Error('The comment only allowed one line');\n        }\n        this.endOfLineComment = text;\n        return this;\n    }\n\n    public GetEndOfLineComment() {\n        return this.endOfLineComment;\n    }\n\n    public HasEndOfLineComment() {\n        return this.endOfLineComment.length > 0;\n    }\n}\n\nexport class KeyValues3Comments {\n    constructor(\n        protected comments: string[] = [],\n        protected endOfLineComment: string = '',\n    ) {}\n\n    public GetComments(): string[] {\n        return this.comments;\n    }\n\n    public HasComments() {\n        return this.comments.length > 0;\n    }\n\n    public SetComments(list: string[]) {\n        this.comments = list;\n        return this;\n    }\n\n    public AppendComment(text: string) {\n        this.comments.push(text);\n        return this;\n    }\n\n    public SetEndOfLineComment(text: string) {\n        if (text.includes('\\n')) {\n            throw Error('The end of line comment only allowed one line');\n        }\n        this.endOfLineComment = text;\n        return this;\n    }\n\n    public GetEndOfLineComment() {\n        return this.endOfLineComment;\n    }\n\n    public HasEndOfLineComment() {\n        return this.endOfLineComment.length > 0;\n    }\n\n    public Format(tab: string = ''): string {\n        let text = '';\n        for (const comment of this.comments) {\n            if (comment.includes('\\n')) {\n                const lines = comment.split('\\n').map((v) => v.trimStart());\n                text += `${tab}/*\\n`;\n                if (lines.some((v) => v.startsWith('*'))) {\n                    text += lines\n                        .map((v) => {\n                            if (v.startsWith('*')) {\n                                v = v.trimStart();\n                            } else {\n                                v = '* ' + v.trimStart();\n                            }\n                            return `${tab} ` + v + '\\n';\n                        })\n                        .join('');\n                    text += `${tab} */\\n`;\n                } else {\n                    text += lines.map((v) => `${tab}` + v + '\\n').join('');\n                    text += `${tab}*/\\n`;\n                }\n            } else {\n                text += `${tab}// ${comment.trimStart()}\\n`;\n            }\n        }\n        return text;\n    }\n}\n","export interface KeyValuesAdapter {\n    readFile(path: string, encoding?: string): Promise<string>;\n    writeFile(path: string, data: string, encoding?: string): Promise<void>;\n    resolvePath(filename: string, basePath: string): string;\n    createKeyValuesID(): string;\n}\n\nlet defaultAdapter: KeyValuesAdapter = {\n    async readFile() {\n        return '';\n    },\n    async writeFile() {},\n    resolvePath(filename: string, basePath: string) {\n        return filename + basePath;\n    },\n    createKeyValuesID() {\n        return '';\n    },\n};\n\nexport function setKeyValuesAdapter(adapter: KeyValuesAdapter): void {\n    defaultAdapter = adapter;\n}\n\nexport function getKeyValuesAdapter(): KeyValuesAdapter {\n    return defaultAdapter;\n}\n","import { getKeyValuesAdapter } from './adapter';\nimport { KeyValuesComments } from './Comments';\n\nconst KeyValuesRootKey = '__KeyValues_Root__';\n\nfunction createID() {\n    const adapter = getKeyValuesAdapter();\n    return adapter.createKeyValuesID();\n}\n\nexport default class KeyValues {\n    private __filename?: string;\n\n    public get filename() {\n        return this.__filename || '';\n    }\n\n    public set filename(s: string | undefined) {\n        this.__filename = s ? s.replace(/\\\\/g, '/') : s;\n    }\n\n    /**\n     * The children of this KeyValues\n     */\n    protected children?: KeyValues[];\n    /**\n     * The value of this KeyValues\n     */\n    protected value?: string;\n    /**\n     * The parent of this KeyValues,\n     */\n    protected parent?: KeyValues;\n    /**\n     * Comment\n     */\n    public Comments = new KeyValuesComments();\n    /**\n     * The KeyValues flags, such as [$WIN32] [$X360]\n     */\n    public Flags: string = '';\n    /**\n     * Unique id of KeyValues\n     */\n    public readonly ID = createID();\n\n    constructor(\n        public Key: string,\n        defaultValue?: string | KeyValues[],\n    ) {\n        this.SetValue(defaultValue || '');\n    }\n\n    /**\n     * The parent of this KeyValues\n     */\n    public GetParent() {\n        return this.parent;\n    }\n\n    /**\n     * Return true that the KeyValues is root.\n     */\n    public IsRoot() {\n        return this.Key === KeyValuesRootKey;\n    }\n\n    /**\n     * The key is #base?\n     */\n    public IsBase() {\n        return this.Key === '#base';\n    }\n\n    protected baseFilePath = '';\n\n    /**\n     * Return #base's value\n     */\n    public GetBaseFilePath() {\n        return this.baseFilePath;\n    }\n\n    /**\n     * KeyValues list of #base\n     */\n    public GetBaseList() {\n        return this.FindAllKeys('#base');\n    }\n\n    /**\n     * The children of this KeyValues,\n     * if no children then return empty array.\n     */\n    public GetChildren(): Readonly<KeyValues[]> {\n        return this.children || [];\n    }\n\n    public GetChildCount() {\n        return this.GetChildren().length;\n    }\n\n    public GetFirstChild(): KeyValues | undefined {\n        return this.GetChildren()[0];\n    }\n\n    public GetLastChild(): KeyValues | undefined {\n        return this.GetChildren()[this.GetChildCount() - 1];\n    }\n\n    /**\n     * Create a KeyValues to children and return it.\n     */\n    public CreateChild(key: string, value: string | KeyValues[]) {\n        const kv = new KeyValues(key, value);\n        this.Append(kv);\n        return kv;\n    }\n\n    /**\n     * The value of this KeyValues,\n     * if no value then return empty string.\n     */\n    public GetValue() {\n        return this.value || '';\n    }\n\n    /**\n     * Return true that the KeyValues exists children and no value.\n     */\n    public HasChildren() {\n        return !!this.children;\n    }\n\n    /**\n     * Set value or children.\n     */\n    public SetValue(v: string | KeyValues[]) {\n        if (Array.isArray(v)) {\n            this.children = v.map((c) => c.Free());\n            delete this.value;\n            for (const kv of this.children) {\n                if (kv === this) {\n                    throw new Error(`SetValue(): The value can not includes self`);\n                }\n                kv.parent = this;\n            }\n        } else {\n            if (this.IsRoot()) {\n                throw new Error('The value of the root node kv must be an array');\n            }\n            this.value = v;\n            delete this.children;\n        }\n        return this;\n    }\n\n    /**\n     * Append a KeyValues to children,\n     * if no children then throw error.\n     */\n    public Append(child: KeyValues) {\n        if (this.children) {\n            if (child === this) {\n                throw new Error(`Append(): Can not append self`);\n            }\n            this.children.push(child.Free());\n            child.parent = this;\n        } else {\n            throw new Error(`The KeyValues [Key = ${this.Key}] does not have children`);\n        }\n        return this;\n    }\n\n    /**\n     * Insert a KeyValues to children,\n     * if no children then throw error.\n     */\n    public Insert(child: KeyValues, index: number) {\n        if (this.children) {\n            if (child === this) {\n                throw new Error(`Insert(): Can not insert self`);\n            }\n            this.children.splice(index, 0, child.Free());\n            child.parent = this;\n        } else {\n            throw new Error(`The KeyValues [Key = ${this.Key}] does not have children`);\n        }\n        return this;\n    }\n\n    /**\n     * Find a KeyValues from children\n     */\n    public Find(\n        callback: (kv: KeyValues, i: number, parent: KeyValues) => boolean,\n    ): KeyValues | undefined {\n        if (!this.children) {\n            return;\n        }\n        for (const [i, kv] of this.children.entries()) {\n            if (callback(kv, i, this) === true) {\n                return kv;\n            }\n        }\n    }\n\n    /**\n     * Find all KeyValues from children\n     */\n    public FindAll(\n        callback: (kv: KeyValues, i: number, parent: KeyValues) => boolean,\n    ): KeyValues[] {\n        if (!this.children) {\n            return [];\n        }\n        const result: KeyValues[] = [];\n        for (const [i, kv] of this.children.entries()) {\n            if (callback(kv, i, this) === true) {\n                result.push(kv);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Find a KeyValues\n     */\n    public FindKey(key: string) {\n        return this.Find((kv) => kv.Key === key);\n    }\n\n    /**\n     * Find all KeyValues\n     */\n    public FindAllKeys(...keys: string[]) {\n        return this.FindAll((kv) => keys.includes(kv.Key));\n    }\n\n    /**\n     * Find a KeyValues from children and children's children...\n     */\n    public FindTraverse(\n        callback: (kv: KeyValues, i: number, parent: KeyValues) => boolean,\n    ): KeyValues | undefined {\n        if (!this.children) {\n            return;\n        }\n        return KeyValues.FindTraverse(this, callback);\n    }\n\n    /**\n     * Find a KeyValues from children and children's children...\n     */\n    protected static FindTraverse(\n        root: KeyValues,\n        callback: (kv: KeyValues, i: number, parent: KeyValues) => boolean,\n    ): KeyValues | undefined {\n        if (root.HasChildren()) {\n            for (const [i, kv] of root.GetChildren().entries()) {\n                if (callback(kv, i, root) === true) {\n                    return kv;\n                }\n                const result = KeyValues.FindTraverse(kv, callback);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n    }\n\n    /**\n     * Find child from the current KeyValues\n     */\n    public FindID(id: string): KeyValues | undefined {\n        return this.Find((kv) => kv.ID === id);\n    }\n\n    /**\n     * Recursively iterate through all children to find the value that matches the ID\n     */\n    public FindIDTraverse(id: string): KeyValues | undefined {\n        return this.FindTraverse((kv) => kv.ID === id);\n    }\n\n    /**\n     * Delete a KeyValues from children\n     */\n    public Delete(child: string | KeyValues): KeyValues | undefined {\n        if (!this.children) {\n            return;\n        }\n        let kv: KeyValues | undefined;\n        if (typeof child === 'string') {\n            kv = this.children.find((v) => v.Key === child);\n        } else {\n            kv = this.children.find((v) => v === child);\n        }\n        if (kv) {\n            this.children = this.children.filter((v) => v !== kv);\n            kv.Free();\n        }\n        return kv;\n    }\n\n    /**\n     * Delete this KeyValues from parent\n     */\n    public Free() {\n        if (this.parent) {\n            this.parent.Delete(this);\n            delete this.parent;\n        }\n        return this;\n    }\n\n    /**\n     * Format KeyValues to file text\n     */\n    public Format(tab: string = '', maxLength: number = -1): string {\n        if (this.IsRoot()) {\n            if (!this.children) {\n                throw new Error('The value of the root node kv must be an array');\n            }\n            return this.children.map((v) => v.Format()).join('\\n');\n        }\n\n        let text = '';\n\n        if (this.Comments.HasComments()) {\n            text += this.Comments.GetComments()\n                .map((v) => `${tab}// ${v.trimStart()}\\n`)\n                .join('');\n        }\n\n        if (this.children) {\n            if (this.IsBase()) {\n                text += `${tab}${this.Key}    \"${this.GetBaseFilePath()}\"`;\n                if (this.Comments.HasEndOfLineComment()) {\n                    text += ` // ${this.Comments.GetEndOfLineComment()}`;\n                }\n                return text;\n            }\n            const maxLength = Math.max(...this.children.map((v) => v.Key.length));\n            text += `${tab}\"${this.Key}\"`;\n            if (this.Comments.HasEndOfLineComment()) {\n                text += ` // ${this.Comments.GetEndOfLineComment()}`;\n            }\n            text += `\\n${tab}{`;\n            for (const kv of this.children) {\n                text += '\\n' + kv.Format(tab + '    ', maxLength);\n            }\n            text += `\\n${tab}}`;\n        } else {\n            if (this.IsBase()) {\n                text += `${tab}${this.Key}    \"${this.value}\"`;\n                if (this.Comments.HasEndOfLineComment()) {\n                    text += ` // ${this.Comments.GetEndOfLineComment()}`;\n                }\n            } else {\n                text += `${tab}\"${this.Key}\"${' '.repeat(\n                    Math.max(0, maxLength - this.Key.length),\n                )}`;\n                text += `    \"${this.value}\"`;\n                if (this.Comments.HasEndOfLineComment()) {\n                    text += ` // ${this.Comments.GetEndOfLineComment()}`;\n                }\n            }\n        }\n        return text;\n    }\n\n    public toString() {\n        return this.Format();\n    }\n\n    /**\n     * Deep clone KeyValues\n     */\n    public Clone(): KeyValues {\n        if (!this.children) {\n            return new KeyValues(this.Key, this.value);\n        }\n        return new KeyValues(\n            this.Key,\n            this.children.map((v) => v.Clone()),\n        );\n    }\n\n    /**\n     * Create root node\n     */\n    public static CreateRoot() {\n        return new KeyValues(KeyValuesRootKey, []);\n    }\n\n    /**\n     * Parse string\n     */\n    public static async Parse(body: string, filename?: string): Promise<KeyValues> {\n        let root = this.CreateRoot();\n        root.filename = filename;\n        this._parse({ body, pos: 0, line: 1 }, root);\n\n        // Load #base\n        if (filename) {\n            const baseList = root.FindAllKeys('#base');\n            const adapter = getKeyValuesAdapter();\n            for (const base of baseList) {\n                const v = base.GetValue().trim();\n                if (v) {\n                    base.baseFilePath = v;\n                    const filePath = adapter.resolvePath(filename, v);\n                    const baseKV = await KeyValues.Load(filePath);\n                    base.filename = baseKV.filename;\n                    base.SetValue(baseKV.GetChildren().map((v) => v.Free()));\n                }\n            }\n        }\n\n        return root;\n    }\n\n    protected static _parse(data: { body: string; pos: number; line: number }, parent: KeyValues) {\n        let kv = new KeyValues('');\n        let key = false;\n        let leftMark = false;\n        let inQoute = false;\n        let str = '';\n        let isEndOfLineComment = false;\n        let lastKV: KeyValues | undefined;\n        let matchFlag = false;\n        for (; data.pos < data.body.length; data.pos++) {\n            const c = data.body[data.pos];\n            const isNewLine = c === '\\n';\n            const isSpace = isNewLine || c === ' ' || c === '\\t' || c === '\\r';\n\n            if (isNewLine) {\n                data.line += 1;\n                isEndOfLineComment = false;\n            }\n\n            // Merge flags text\n            if (lastKV && matchFlag) {\n                if (c === ']') {\n                    lastKV.Flags = str;\n                    matchFlag = false;\n                    str = '';\n                    continue;\n                }\n                str += c;\n                continue;\n            }\n\n            // If leftMark is true then merge char to str\n            if (leftMark) {\n                if (!inQoute) {\n                    if (c === '{' || c === '\"' || c === '[' || c === ']') {\n                        throw Error(`Not readable in line ${data.line}`);\n                    }\n                    if (isSpace || c === '}') {\n                        if (key) {\n                            kv.Key = str;\n                        } else {\n                            kv.SetValue(str);\n                            parent.Append(kv);\n                            lastKV = kv;\n                            kv = new KeyValues('');\n                        }\n                        leftMark = false;\n                        inQoute = false;\n                        str = '';\n                        if (c === '}') {\n                            data.pos--;\n                        }\n                        continue;\n                    }\n                    str += c;\n                    continue;\n                }\n                if (c === '\\\\') {\n                    data.pos++;\n                    str += c + data.body[data.pos];\n                    continue;\n                }\n                if (c === '\"') {\n                    if (key) {\n                        kv.Key = str;\n                    } else {\n                        kv.SetValue(str);\n                        parent.Append(kv);\n                        lastKV = kv;\n                        kv = new KeyValues('');\n                    }\n                    leftMark = false;\n                    inQoute = false;\n                    str = '';\n                    continue;\n                }\n                str += c;\n                continue;\n            }\n\n            // if comment\n            if (c === '/') {\n                if (data.body[data.pos + 1] === '*') {\n                    throw Error(`Line ${data.line}: not support multi-line comment`);\n                }\n                if (data.body[data.pos + 1] === '/') {\n                    const endIndex = data.body.indexOf('\\n', data.pos + 1);\n                    const comment = data.body.slice(data.pos + 2, endIndex).trim();\n                    if (comment) {\n                        if (isEndOfLineComment) {\n                            if (key) {\n                                kv.Comments.SetEndOfLineComment(comment);\n                            } else {\n                                const lastChild = parent.GetLastChild();\n                                if (lastChild) {\n                                    lastChild.Comments.SetEndOfLineComment(comment);\n                                }\n                            }\n                        } else {\n                            kv.Comments.AppendComment(comment);\n                        }\n                    }\n                    isEndOfLineComment = false;\n                    data.pos = endIndex;\n                    continue;\n                }\n            }\n\n            // If open breace\n            if (c === '{') {\n                data.pos++;\n                kv.SetValue([]);\n                parent.Append(kv);\n                this._parse(data, kv);\n                lastKV = kv;\n                kv = new KeyValues('');\n                key = false;\n                continue;\n            }\n\n            // If close breace\n            if (c === '}') {\n                data.pos++;\n                break;\n            }\n\n            // If space\n            if (isSpace) {\n                continue;\n            }\n\n            // Match flag\n            if (lastKV && c === '[') {\n                str = '';\n                matchFlag = true;\n                continue;\n            }\n\n            // start merge char\n            key = !key;\n            leftMark = true;\n            inQoute = c === '\"';\n            str = inQoute ? '' : c;\n            isEndOfLineComment = true;\n        }\n    }\n\n    /**\n     * Convert KeyValues to object and exclude comments.\n     */\n    public toObject<T = any>(): T {\n        const obj: any = {};\n        if (!this.HasChildren()) {\n            throw Error('Not found children in this KeyValues');\n        }\n\n        for (const kv of this.children!) {\n            if (!kv.HasChildren()) {\n                obj[kv.Key] = kv.GetValue();\n            } else {\n                obj[kv.Key] = kv.toObject();\n            }\n        }\n\n        return obj;\n    }\n\n    /**\n     * Load KeyValues from file\n     */\n    public static async Load(filename: string, encoding?: string): Promise<KeyValues> {\n        const adapter = getKeyValuesAdapter();\n        const text = await adapter.readFile(filename, encoding);\n        if (text.charCodeAt(0) === 0xfeff) {\n            return await this.Parse(text.slice(1), filename);\n        }\n        return await this.Parse(text, filename);\n    }\n\n    /**\n     * Save KeyValues to file\n     */\n    public async Save(otherFilename?: string, encoding?: string): Promise<void> {\n        const filename = otherFilename ?? this.filename;\n        if (!filename) {\n            throw new Error('Not found filename in KeyValues');\n        }\n        const adapter = getKeyValuesAdapter();\n        await adapter.writeFile(filename, this.Format(), encoding);\n\n        // Save #base\n        const baseList = this.FindAllKeys('#base');\n        for (const base of baseList) {\n            const content = base\n                .GetChildren()\n                .map((v) => v.Format())\n                .join('\\n');\n            if (otherFilename) {\n                const filePath = adapter.resolvePath(filename, base.GetBaseFilePath());\n                await adapter.writeFile(filePath, content, encoding);\n            } else {\n                await adapter.writeFile(base.filename!, content, encoding);\n            }\n        }\n    }\n}\n","import { getKeyValuesAdapter } from './adapter';\nimport { KeyValues3Comments } from './Comments';\n\nfunction createID() {\n    const adapter = getKeyValuesAdapter();\n    return adapter.createKeyValuesID();\n}\n\nexport interface IKV3Value {\n    Comments: KeyValues3Comments;\n    Value(): any;\n    GetOwner(): KeyValues3 | undefined;\n    SetOwner(owner: KeyValues3 | undefined): void;\n    IsBoolean(): this is ValueBoolean;\n    IsInt(): this is ValueInt;\n    IsDouble(): this is ValueDouble;\n    IsString(): this is ValueString;\n    IsFeature(): this is ValueFeature;\n    IsArray(): this is ValueArray;\n    IsObject(): this is ValueObject;\n    IsNull(): this is ValueNull;\n    Format(): string;\n    Clone(): IKV3Value;\n}\n\nexport class KV3BaseValue implements IKV3Value {\n    protected value: any;\n    protected owner?: KeyValues3;\n    public Comments = new KeyValues3Comments();\n\n    constructor(owner?: KeyValues3) {\n        this.owner = owner;\n    }\n\n    public Value() {\n        return this.value;\n    }\n\n    public GetOwner() {\n        return this.owner;\n    }\n\n    SetOwner(owner: KeyValues3 | undefined): void {\n        this.owner = owner;\n    }\n\n    public IsBoolean(): this is ValueBoolean {\n        return this instanceof ValueBoolean;\n    }\n    public IsInt(): this is ValueInt {\n        return this instanceof ValueInt;\n    }\n    public IsDouble(): this is ValueDouble {\n        return this instanceof ValueDouble;\n    }\n    public IsString(): this is ValueString {\n        return this instanceof ValueString;\n    }\n    public IsFeature(): this is ValueFeature {\n        return this instanceof ValueFeature;\n    }\n    public IsArray(): this is ValueArray {\n        return this instanceof ValueArray;\n    }\n    public IsObject(): this is ValueObject {\n        return this instanceof ValueObject;\n    }\n    public IsNull(): this is ValueNull {\n        return this instanceof ValueNull;\n    }\n\n    public Format(): string {\n        return String(this.value);\n    }\n\n    public Clone() {\n        const v = new KV3BaseValue(this.owner);\n        v.value = this.value;\n        return v;\n    }\n}\n\n/**\n * Null\n */\nclass ValueNull extends KV3BaseValue {\n    constructor() {\n        super();\n    }\n\n    public Value() {\n        return null;\n    }\n\n    public Format(): string {\n        return `null`;\n    }\n\n    public Clone() {\n        const v = new ValueNull();\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\n/**\n * String\n */\nclass ValueString extends KV3BaseValue {\n    protected value: string = '';\n\n    constructor(initValue?: string) {\n        super();\n        if (initValue) {\n            this.SetValue(initValue);\n        }\n    }\n\n    public Value() {\n        return this.value;\n    }\n\n    public SetValue(v: string) {\n        this.value = String(v);\n        return this;\n    }\n\n    public Format(): string {\n        if (this.value.includes('\\n')) {\n            return `\"\"\"${this.value}\"\"\"`;\n        }\n        return `\"${this.value}\"`;\n    }\n\n    public Clone() {\n        const v = new ValueString(this.value);\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\n/**\n * Boolean\n */\nclass ValueBoolean extends KV3BaseValue {\n    protected value: boolean = false;\n\n    constructor(initValue?: boolean) {\n        super();\n        if (initValue) {\n            this.SetValue(initValue);\n        }\n    }\n\n    public Value() {\n        return this.value;\n    }\n\n    public SetValue(v: boolean) {\n        this.value = v === true;\n        return this;\n    }\n\n    public Clone() {\n        const v = new ValueBoolean(this.value);\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\n/**\n * Int\n */\nclass ValueInt extends KV3BaseValue {\n    protected value: number = 0;\n\n    constructor(initValue?: number) {\n        super();\n        if (initValue) {\n            this.SetValue(initValue);\n        }\n    }\n\n    public Value() {\n        return this.value;\n    }\n\n    public SetValue(v: number) {\n        this.value = Math.floor(v);\n        return this;\n    }\n\n    public Clone() {\n        const v = new ValueInt(this.value);\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\n/**\n * Double\n */\nclass ValueDouble extends KV3BaseValue {\n    protected value: number = 0;\n\n    constructor(initValue?: number) {\n        super();\n        if (initValue) {\n            this.SetValue(initValue);\n        }\n    }\n\n    public Value() {\n        return this.value;\n    }\n\n    public SetValue(v: number) {\n        this.value = v;\n        return this;\n    }\n\n    public Format(): string {\n        return this.value.toFixed(6);\n    }\n\n    public Clone() {\n        const v = new ValueDouble(this.value);\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\n/**\n * Similar values:\n * resource:\"\"\n * deferred_resource:\"\"\n * soundevent:\"\"\n */\nclass ValueFeature extends KV3BaseValue {\n    protected value: string = '';\n\n    constructor(\n        public Feature = 'resource',\n        initValue?: string,\n    ) {\n        super();\n        if (initValue) {\n            this.SetValue(initValue);\n        }\n    }\n\n    public Value() {\n        return this.value;\n    }\n\n    public SetValue(v: string) {\n        this.value = v;\n        return this;\n    }\n\n    public Format(): string {\n        return `${this.Feature}:\"${this.value}\"`;\n    }\n\n    public Clone() {\n        const v = new ValueFeature(this.value);\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\n/**\n * Array\n */\nclass ValueArray extends KV3BaseValue {\n    protected value: IKV3Value[] = [];\n\n    constructor(initValue?: IKV3Value[]) {\n        super();\n        if (initValue) {\n            this.SetValue(initValue);\n        }\n    }\n\n    public Value(): Readonly<IKV3Value[]> {\n        return this.value;\n    }\n\n    public SetValue(list: IKV3Value[]) {\n        this.value = list.map((v) => v);\n        return this;\n    }\n\n    public Append(...kv: IKV3Value[]) {\n        this.value.push(...kv);\n        return this;\n    }\n\n    public Insert(index: number, ...kv: IKV3Value[]) {\n        this.value.splice(index, 0, ...kv);\n        return this;\n    }\n\n    public Delete(v: IKV3Value) {\n        const i = this.value.indexOf(v);\n        if (i >= 0) {\n            this.value.splice(i, 1);\n        }\n        return this;\n    }\n\n    /**\n     * Recursively iterate through all children to find the value that matches the ID\n     */\n    public FindIDTraverse(id: string): KeyValues3 | undefined {\n        for (const v of this.value) {\n            if (v.IsObject() || v.IsArray()) {\n                const result = v.FindIDTraverse(id);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n    }\n\n    /**\n     * Recursively iterate through all children to find the value that matches the callback\n     */\n    public Search(callback: (v: IKV3Value) => boolean): IKV3Value | undefined {\n        for (const v of this.value) {\n            if (callback(v)) {\n                return v;\n            }\n            if (v.IsObject()) {\n                const result = v.Search(callback);\n                if (result) {\n                    return result;\n                }\n            } else if (v.IsArray()) {\n                const result = v.Search(callback);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n    }\n\n    public Get(index: number): IKV3Value | undefined {\n        return this.value[index];\n    }\n\n    public Format(tab: string = ''): string {\n        let text = '';\n        let oneLine = true;\n\n        if (\n            this.value.some(\n                (v) =>\n                    v.IsArray() ||\n                    v.IsObject() ||\n                    v.Comments.HasComments() ||\n                    v.Comments.HasEndOfLineComment(),\n            )\n        ) {\n            oneLine = false;\n        } else {\n            const max = this.value.reduce((pv, v) => pv + v.Format().length, 0);\n            if (max > 64) {\n                oneLine = false;\n            }\n        }\n\n        if (oneLine) {\n            text = ` [ `;\n            text += this.value\n                .map((v) => {\n                    return v.Format();\n                })\n                .join(', ');\n            text += ` ]`;\n        } else {\n            text = `\\n${tab}[`;\n            text += this.value\n                .map((v) => {\n                    let comment = '';\n                    let endComment = '';\n                    if (v.Comments.HasComments()) {\n                        comment = '\\n' + v.Comments.Format(tab + '    ').trimEnd();\n                    }\n                    if (v.Comments.HasEndOfLineComment()) {\n                        endComment = ` // ${v.Comments.GetEndOfLineComment()}`;\n                    }\n                    if (v.IsArray()) {\n                        let str = v.Format(tab + '    ');\n                        if (!str.startsWith('\\n')) {\n                            str = '\\n' + tab + '   ' + str;\n                        }\n                        return comment + str + ',' + endComment;\n                    } else if (v.IsObject()) {\n                        return comment + v.Format(tab + '    ') + ',' + endComment;\n                    }\n                    return comment + '\\n' + tab + '    ' + v.Format() + ',' + endComment;\n                })\n                .join('');\n            text += `\\n${tab}]`;\n        }\n\n        return text;\n    }\n\n    /**\n     * Convert to javascript array\n     */\n    public toArray(): any {\n        const result: any = [];\n        for (const v of this.value) {\n            if (v.IsObject()) {\n                result.push(v.toObject());\n            } else if (v.IsArray()) {\n                result.push(v.toArray());\n            } else {\n                result.push(v.Value());\n            }\n        }\n        return result;\n    }\n\n    public Clone() {\n        const v = new ValueArray(this.value.map((v) => v.Clone()));\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\n/**\n * Object\n */\nclass ValueObject extends KV3BaseValue {\n    protected value: KeyValues3[] = [];\n\n    constructor(initValue?: KeyValues3[]) {\n        super();\n        if (initValue) {\n            this.SetValue(initValue);\n        }\n    }\n\n    public Value(): Readonly<KeyValues3[]> {\n        return this.value;\n    }\n\n    public SetValue(list: KeyValues3[]) {\n        this.value = [...list];\n        return this;\n    }\n\n    public Create(key: string, value: IKV3Value) {\n        const kv = new KeyValues3(key, value);\n        this.Append(kv);\n        return kv;\n    }\n\n    public Append(...kv: KeyValues3[]) {\n        this.value.push(...kv);\n        return this;\n    }\n\n    public Insert(index: number, ...kv: KeyValues3[]) {\n        this.value.splice(index, 0, ...kv);\n        return this;\n    }\n\n    public Delete(v: string | KeyValues3) {\n        let kv: KeyValues3 | undefined;\n        if (typeof v === 'string') {\n            kv = this.value.find((c) => c.Key === v);\n        } else {\n            kv = this.value.find((c) => c === v);\n        }\n        if (kv) {\n            this.value.splice(this.value.indexOf(kv), 1);\n        }\n        return kv;\n    }\n\n    public Get(index: number): KeyValues3 | undefined {\n        return this.value[index];\n    }\n\n    /**\n     * Find a KeyValues3\n     */\n    public Find(\n        callback: (kv: KeyValues3, i: number, parent: ValueObject) => boolean,\n    ): KeyValues3 | undefined {\n        for (const [i, kv] of this.value.entries()) {\n            if (callback(kv, i, this) === true) {\n                return kv;\n            }\n        }\n    }\n\n    /**\n     * Find a KeyValues3\n     */\n    public FindKey(key: string): KeyValues3 | undefined {\n        return this.Find((kv) => kv.Key === key);\n    }\n\n    /**\n     * Find a KeyValues3\n     */\n    public FindAll(\n        callback: (kv: KeyValues3, i: number, parent: ValueObject) => boolean,\n    ): KeyValues3[] {\n        const result: KeyValues3[] = [];\n        for (const [i, kv] of this.value.entries()) {\n            if (callback(kv, i, this) === true) {\n                result.push(kv);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Find a KeyValues3\n     */\n    public FindAllKeys(...keys: string[]): KeyValues3[] {\n        return this.FindAll((kv) => keys.includes(kv.Key));\n    }\n\n    /**\n     * Recursively iterate through all children to find the value that matches the ID\n     */\n    public FindIDTraverse(id: string): KeyValues3 | undefined {\n        for (const kv of this.value) {\n            if (kv.ID === id) {\n                return kv;\n            }\n            const result = kv.FindIDTraverse(id);\n            if (result) {\n                return result;\n            }\n        }\n    }\n\n    /**\n     * Recursively iterate through all children to find the value that matches the callback\n     */\n    public Search(callback: (value: IKV3Value) => boolean): IKV3Value | undefined {\n        for (const kv of this.value) {\n            const v = kv.GetValue();\n            if (callback(v) === true) {\n                return v;\n            }\n            if (v.IsObject()) {\n                const result = v.Search(callback);\n                if (result) {\n                    return result;\n                }\n            } else if (v.IsArray()) {\n                const result = v.Search(callback);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n    }\n\n    public Format(tab: string = ''): string {\n        let text = `\\n${tab}{`;\n        text += this.value.map((v) => '\\n' + v.Format(tab + '    ')).join('');\n        text += `\\n${tab}}`;\n        return text;\n    }\n\n    /**\n     * Convert to javascript object\n     */\n    public toObject(): any {\n        const result: any = {};\n        for (const kv of this.value) {\n            if (kv.GetValue().IsArray() || kv.GetValue().IsObject()) {\n                result[kv.Key] = kv.toObject();\n            } else {\n                result[kv.Key] = kv.GetValue().Value();\n            }\n        }\n        return result;\n    }\n\n    public Clone() {\n        const v = new ValueObject(this.value.map((v) => v.Clone()));\n        v.SetOwner(this.owner);\n        return v;\n    }\n}\n\nconst MatchKeyNoQuote = /^[\\w\\d_\\.]+$/;\nconst MatchInt = /^-?\\d+$/;\nconst MatchDouble = /^-?\\d+(\\.\\d+)?$/;\nconst MatchDouble2 = /^-?\\.\\d+$/;\nconst MatchDouble3 = /^-?\\d+\\.$/;\nconst MatchStrangeNumber = /^[\\d\\+-\\.]+$/;\nconst MatchBoolean = /^(true|false)$/;\nconst MatchFeature = /^[0-9a-zA-Z_]+:\"(.*)\"$/;\nconst MatchNull = /^null$/;\n\n/**\n * https://developer.valvesoftware.com/wiki/Dota_2_Workshop_Tools/KeyValues3\n */\nexport default class KeyValues3 {\n    public static String(value?: string) {\n        return new ValueString(value);\n    }\n    public static Boolean(value?: boolean) {\n        return new ValueBoolean(value);\n    }\n    public static Int(value?: number) {\n        return new ValueInt(value);\n    }\n    public static Double(value?: number) {\n        return new ValueDouble(value);\n    }\n    public static Feature(feature: string, value?: string) {\n        return new ValueFeature(feature, value);\n    }\n    public static Array(value?: IKV3Value[]) {\n        return new ValueArray(value);\n    }\n    public static Object(value?: KeyValues3[]) {\n        return new ValueObject(value);\n    }\n    public static Null() {\n        return new ValueNull();\n    }\n\n    private __filename?: string;\n\n    public get filename() {\n        return this.__filename || '';\n    }\n\n    public set filename(s: string | undefined) {\n        this.__filename = s ? s.replace(/\\\\/g, '/') : s;\n    }\n\n    protected value: IKV3Value;\n\n    protected header?: string;\n\n    /**\n     * Unique id of KeyValues3\n     */\n    public readonly ID = createID();\n\n    constructor(\n        public Key: string,\n        defaultValue: IKV3Value,\n    ) {\n        this.value = defaultValue;\n        this.value.SetOwner(this);\n    }\n\n    public IsRoot() {\n        return !!this.header;\n    }\n\n    public GetHeader() {\n        return this.header;\n    }\n\n    public static CreateRoot() {\n        const kv = new KeyValues3('', new ValueObject());\n        kv.header = this.CommonHeader;\n        return kv;\n    }\n\n    public static CommonHeader =\n        '<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->';\n\n    public GetValue() {\n        return this.value;\n    }\n\n    /**\n     * Return when value is ValueObject, otherwise throw an error.\n     */\n    public GetObject(): ValueObject {\n        if (!this.value.IsObject()) {\n            throw Error('The value is not object');\n        }\n        return this.value;\n    }\n\n    /**\n     * Return when value is ValueArray, otherwise throw an error.\n     */\n    public GetArray(): ValueArray {\n        if (!this.value.IsArray()) {\n            throw Error('The value is not array');\n        }\n        return this.value;\n    }\n\n    public SetValue(v: IKV3Value) {\n        if (this.IsRoot() && !v.IsObject()) {\n            throw Error('The root node of KeyValues3 must be an object');\n        }\n        this.value = v;\n    }\n\n    public CreateObjectValue(key: string, value: IKV3Value) {\n        if (!this.value.IsObject()) {\n            throw Error('The KeyValues3 is not an object');\n        }\n        return this.value.Create(key, value);\n    }\n\n    public AppendValue(...values: IKV3Value[]) {\n        if (!this.value.IsArray()) {\n            throw Error('The KeyValues3 is not an array');\n        }\n        return this.value.Append(...values);\n    }\n\n    public Find(\n        callback: (kv: KeyValues3, i: number, parent: ValueObject) => boolean,\n    ): KeyValues3 | undefined {\n        if (!this.value.IsObject()) {\n            throw Error('The KeyValues3 is not an object');\n        }\n        return this.value.Find(callback);\n    }\n\n    public FindKey(key: string): KeyValues3 | undefined {\n        return this.Find((kv) => kv.Key === key);\n    }\n\n    public FindAll(\n        callback: (kv: KeyValues3, i: number, parent: ValueObject) => boolean,\n    ): KeyValues3[] {\n        if (!this.value.IsObject()) {\n            throw Error('The KeyValues3 is not an object');\n        }\n        return this.value.FindAll(callback);\n    }\n\n    public FindAllKeys(...keys: string[]): KeyValues3[] {\n        return this.FindAll((kv) => keys.includes(kv.Key));\n    }\n\n    /**\n     * Find child from the current KeyValues3\n     */\n    public FindID(id: string): KeyValues3 | undefined {\n        return this.Find((kv) => kv.ID === id);\n    }\n\n    /**\n     * Recursively iterate through all children to find the value that matches the ID\n     */\n    public FindIDTraverse(id: string): KeyValues3 | undefined {\n        if (this.value.IsObject() || this.value.IsArray()) {\n            return this.value.FindIDTraverse(id);\n        }\n    }\n\n    /**\n     * Recursively iterate through all children to find the value that matches the callback\n     */\n    public Search(callback: (value: IKV3Value) => boolean): IKV3Value | undefined {\n        if (this.value.IsObject() || this.value.IsArray()) {\n            return this.value.Search(callback);\n        }\n    }\n\n    public Format(tab: string = ''): string {\n        let text = '';\n        let prefix = '';\n        const root = this.IsRoot();\n\n        if (MatchKeyNoQuote.test(this.Key)) {\n            prefix = `${tab}${this.Key} =`;\n        } else {\n            prefix = `${tab}\"${this.Key}\" =`;\n        }\n\n        if (root) {\n            text += this.header;\n        }\n\n        if (this.value.Comments.HasComments()) {\n            text += this.value.Comments.Format(tab);\n        }\n\n        if (this.value.IsArray()) {\n            text += prefix;\n            text += this.value.Format(tab);\n        } else if (this.value.IsObject()) {\n            if (root) {\n                text += this.value.Format(tab);\n            } else {\n                text += prefix;\n                text += this.value.Format(tab);\n            }\n        } else {\n            text += prefix + ` ${this.value.Format()}`;\n        }\n\n        if (this.value.Comments.HasEndOfLineComment()) {\n            text += ` // ${this.value.Comments.GetEndOfLineComment()}`;\n        }\n\n        return text;\n    }\n\n    public toString() {\n        return this.Format();\n    }\n\n    /**\n     * Convert KeyValues3 to object and exclude comments.\n     * If the value of KeyValues3 is not object or array, then return object,\n     * which has only the key and value of KeyValues3\n     */\n    public toObject<T = any>(): T {\n        if (this.value.IsArray()) {\n            return this.value.toArray();\n        } else if (this.value.IsObject()) {\n            return this.value.toObject();\n        }\n        return { [this.Key]: this.value.Value() } as any;\n    }\n\n    /**\n     * Deep clone KeyValues3\n     */\n    public Clone(): KeyValues3 {\n        if (this.IsRoot()) {\n            const root = KeyValues3.CreateRoot();\n            root.header = this.header;\n            root.__filename = this.__filename;\n            root.SetValue(this.value.Clone());\n            return root;\n        }\n        return new KeyValues3(this.Key, this.value.Clone());\n    }\n\n    /**\n     * Parse text of KeyValues3\n     */\n    public static Parse(body: string, filename?: string): KeyValues3 {\n        let root = this.CreateRoot();\n        root.filename = filename;\n        const firstLineIndex = body.indexOf('\\n');\n        const header = body.slice(0, firstLineIndex).trim();\n        if (!header.startsWith('<!--') || !header.endsWith('-->')) {\n            throw Error('Invalid header');\n        }\n        root.header = header;\n        this._parse(root, {\n            body,\n            line: 2,\n            pos: body.indexOf('{', firstLineIndex) + 1,\n            tokenCounter: 1,\n        });\n        return root;\n    }\n\n    protected static _parse(\n        parent: KeyValues3,\n        data: { body: string; line: number; pos: number; tokenCounter: number },\n    ) {\n        if (parent.value.IsObject()) {\n            let isKey = true;\n            let startMark = false;\n            let inQoute = false;\n            let key = '';\n            let str = '';\n            let isEndOfLineComment = false;\n            let commentCache: string[] = [];\n            let lastKV: KeyValues3 | undefined;\n            for (; data.pos < data.body.length; data.pos++) {\n                const c = data.body[data.pos];\n                const isNewLine = c === '\\n';\n                const isSpace = isNewLine || c === ' ' || c === '\\t' || c === '\\r';\n\n                if (isNewLine) {\n                    data.line += 1;\n                    isEndOfLineComment = false;\n                }\n\n                if (startMark) {\n                    if (isKey) {\n                        // isKey\n                        if (inQoute) {\n                            if (c === '\\\\') {\n                                str += c + data.body[data.pos + 1];\n                                data.pos += 1;\n                                continue;\n                            }\n                            if (c === '\"') {\n                                key = str;\n                                str = '';\n                                startMark = false;\n                                continue;\n                            } else {\n                                str += c;\n                                continue;\n                            }\n                        } else {\n                            if (isSpace || c === '=') {\n                                key = str;\n                                str = '';\n                                startMark = false;\n                                if (c === '=') {\n                                    data.pos -= 1;\n                                }\n                                continue;\n                            }\n                            str += c;\n                            continue;\n                        }\n                        // isKey\n                    } else {\n                        // not isKey\n                        if (inQoute) {\n                            if (c === '\\\\') {\n                                str += c + data.body[data.pos + 1];\n                                data.pos += 1;\n                                continue;\n                            }\n                            if (c === '\"') {\n                                if (str.length <= 0) {\n                                    // check start on multi-line\n                                    if (data.body[data.pos + 1] === '\"') {\n                                        if (\n                                            data.body[data.pos + 2] !== '\\n' &&\n                                            data.body[data.pos + 2] !== '\\r'\n                                        ) {\n                                            throw new Error(\n                                                this._parse_error(\n                                                    data.line,\n                                                    `multi-line start identifier \"\"\" must be followed by newline`,\n                                                ),\n                                            );\n                                        }\n                                        data.pos += 1;\n                                        continue;\n                                    }\n                                } else {\n                                    // check end on multi-line\n                                    if (data.body[data.pos + 1] === '\"') {\n                                        if (data.body[data.pos + 2] === '\"') {\n                                            if (data.body[data.pos - 1] !== '\\n') {\n                                                throw new Error(\n                                                    this._parse_error(\n                                                        data.line,\n                                                        `multi-line end identifier \"\"\" must be at the beginning of line`,\n                                                    ),\n                                                );\n                                            }\n                                            data.pos += 2;\n                                        } else {\n                                            throw new Error(\n                                                this._parse_error(\n                                                    data.line,\n                                                    `multi-line string must be end with \"\"\"`,\n                                                ),\n                                            );\n                                        }\n                                    }\n                                }\n                                lastKV = parent.CreateObjectValue(key, new ValueString(str));\n                                lastKV.value.Comments.SetComments(commentCache);\n                                commentCache = [];\n                                key = '';\n                                str = '';\n                                isKey = true;\n                                inQoute = false;\n                                startMark = false;\n                                continue;\n                            } else {\n                                str += c;\n                                continue;\n                            }\n                        } else {\n                            if (isSpace || c === ']' || c === '}') {\n                                if (MatchBoolean.test(str)) {\n                                    lastKV = parent.CreateObjectValue(\n                                        key,\n                                        new ValueBoolean(str === 'true'),\n                                    );\n                                } else if (MatchNull.test(str)) {\n                                    lastKV = parent.CreateObjectValue(key, new ValueNull());\n                                } else if (MatchInt.test(str)) {\n                                    lastKV = parent.CreateObjectValue(\n                                        key,\n                                        new ValueInt(parseInt(str)),\n                                    );\n                                } else if (\n                                    MatchDouble.test(str) ||\n                                    MatchDouble2.test(str) ||\n                                    MatchDouble3.test(str)\n                                ) {\n                                    lastKV = parent.CreateObjectValue(\n                                        key,\n                                        new ValueDouble(Number(str)),\n                                    );\n                                } else if (MatchFeature.test(str)) {\n                                    const index = str.indexOf(':');\n                                    const feature = str.slice(0, index);\n                                    let v = str.slice(index + 2, str.length - 1);\n                                    lastKV = parent.CreateObjectValue(\n                                        key,\n                                        new ValueFeature(feature, v),\n                                    );\n                                } else if (MatchStrangeNumber.test(str)) {\n                                    lastKV = parent.CreateObjectValue(key, new ValueString(str));\n                                } else {\n                                    throw new Error(\n                                        this._parse_error(data.line, `Invalid value '${str}'`),\n                                    );\n                                }\n                                lastKV.value.Comments.SetComments(commentCache);\n                                commentCache = [];\n                                key = '';\n                                str = '';\n                                isKey = true;\n                                inQoute = false;\n                                startMark = false;\n                                if (c === ']' || c === '}') {\n                                    data.pos -= 1;\n                                }\n                                continue;\n                            }\n                            str += c;\n                            continue;\n                        }\n                        // not isKey\n                    }\n                }\n\n                if (c === '/') {\n                    if (data.body[data.pos + 1] === '/') {\n                        const nextIndex = data.body.indexOf('\\n', data.pos + 2);\n                        if (isEndOfLineComment && lastKV) {\n                            lastKV.value.Comments.SetEndOfLineComment(\n                                data.body.slice(data.pos + 2, nextIndex).trimStart(),\n                            );\n                            isEndOfLineComment = false;\n                        } else {\n                            commentCache.push(data.body.slice(data.pos + 2, nextIndex).trimStart());\n                        }\n                        data.pos = nextIndex;\n                        data.line += 1;\n                        continue;\n                    } else if (data.body[data.pos + 1] === '*') {\n                        const nextIndex = data.body.indexOf('*/', data.pos + 2);\n                        const comment = data.body.slice(data.pos + 2, nextIndex).trim();\n                        if (comment.includes('\\n')) {\n                            commentCache.push(comment);\n                        } else {\n                            if (isEndOfLineComment && lastKV) {\n                                lastKV.value.Comments.SetEndOfLineComment(comment);\n                                isEndOfLineComment = false;\n                            } else {\n                                commentCache.push(comment);\n                            }\n                        }\n                        data.line += data.body.slice(data.pos, nextIndex).match(/\\n/g)?.length || 1;\n                        data.pos = nextIndex + 1;\n                        continue;\n                    }\n                }\n\n                if (c === '{') {\n                    if (isKey) {\n                        throw new Error(this._parse_error(data.line, `Invalid char '{'`));\n                    }\n                    const child = parent.CreateObjectValue(key, new ValueObject());\n                    data.pos += 1;\n                    data.tokenCounter += 1;\n                    this._parse(child, data);\n                    key = '';\n                    str = '';\n                    isKey = true;\n                    inQoute = false;\n                    startMark = false;\n                    continue;\n                }\n\n                if (c === '[') {\n                    if (isKey) {\n                        throw new Error(this._parse_error(data.line, `Invalid char '['`));\n                    }\n                    const child = parent.CreateObjectValue(key, new ValueArray());\n                    data.pos += 1;\n                    data.tokenCounter += 1;\n                    this._parse(child, data);\n                    key = '';\n                    str = '';\n                    isKey = true;\n                    inQoute = false;\n                    startMark = false;\n                    continue;\n                }\n\n                if (c === '}' || c === ']') {\n                    data.tokenCounter += 1;\n                    return;\n                }\n\n                if (isSpace) {\n                    continue;\n                }\n\n                if (c === '=') {\n                    if (key === '' && !inQoute) {\n                        throw new Error(this._parse_error(data.line, `Invalid member name '='`));\n                    }\n                    if (!inQoute && !MatchKeyNoQuote.test(key)) {\n                        throw new Error(\n                            this._parse_error(data.line, `Invalid member name '${key}'`),\n                        );\n                    }\n                    isKey = false;\n                    inQoute = false;\n                    continue;\n                }\n\n                startMark = true;\n                inQoute = c === '\"';\n                str = inQoute ? '' : c;\n                isEndOfLineComment = true;\n            }\n        } else if (parent.value.IsArray()) {\n            let startMark = false;\n            let inQoute = false;\n            let str = '';\n            let expectedEnd = false;\n            let isEndOfLineComment = false;\n            let commentCache: string[] = [];\n            let lastValue: IKV3Value | undefined;\n            for (; data.pos < data.body.length; data.pos++) {\n                const c = data.body[data.pos];\n                const isNewLine = c === '\\n';\n                const isSpace = isNewLine || c === ' ' || c === '\\t' || c === '\\r';\n\n                if (isNewLine) {\n                    data.line += 1;\n                    isEndOfLineComment = false;\n                }\n\n                if (startMark) {\n                    if (inQoute) {\n                        if (c === '\\\\') {\n                            str += c + data.body[data.pos + 1];\n                            data.pos += 1;\n                            continue;\n                        }\n                        if (c === '\"') {\n                            if (str.length <= 0) {\n                                // check start on multi-line\n                                if (data.body[data.pos + 1] === '\"') {\n                                    if (\n                                        data.body[data.pos + 2] !== '\\n' &&\n                                        data.body[data.pos + 2] !== '\\r'\n                                    ) {\n                                        throw new Error(\n                                            this._parse_error(\n                                                data.line,\n                                                `multi-line start identifier \"\"\" must be followed by newline`,\n                                            ),\n                                        );\n                                    }\n                                    data.pos += 1;\n                                    continue;\n                                }\n                            } else {\n                                // check end on multi-line\n                                if (data.body[data.pos + 1] === '\"') {\n                                    if (data.body[data.pos + 2] === '\"') {\n                                        if (data.body[data.pos - 1] !== '\\n') {\n                                            throw new Error(\n                                                this._parse_error(\n                                                    data.line,\n                                                    `multi-line end identifier \"\"\" must be at the beginning of line`,\n                                                ),\n                                            );\n                                        }\n                                        data.pos += 2;\n                                    } else {\n                                        throw new Error(\n                                            this._parse_error(\n                                                data.line,\n                                                `multi-line string must be end with \"\"\"`,\n                                            ),\n                                        );\n                                    }\n                                }\n                            }\n                            lastValue = new ValueString(str);\n                            parent.AppendValue(lastValue);\n                            lastValue.Comments.SetComments(commentCache);\n                            commentCache = [];\n                            str = '';\n                            inQoute = false;\n                            startMark = false;\n                            expectedEnd = true;\n                            continue;\n                        } else {\n                            str += c;\n                            continue;\n                        }\n                    } else {\n                        if (isSpace || c === ',' || c === ']') {\n                            if (MatchBoolean.test(str)) {\n                                lastValue = new ValueBoolean(str === 'true');\n                                parent.AppendValue(lastValue);\n                            } else if (MatchNull.test(str)) {\n                                lastValue = new ValueNull();\n                                parent.AppendValue(lastValue);\n                            } else if (MatchInt.test(str)) {\n                                lastValue = new ValueInt(parseInt(str));\n                                parent.AppendValue(lastValue);\n                            } else if (\n                                MatchDouble.test(str) ||\n                                MatchDouble2.test(str) ||\n                                MatchDouble3.test(str)\n                            ) {\n                                lastValue = new ValueDouble(Number(str));\n                                parent.AppendValue(lastValue);\n                            } else if (MatchFeature.test(str)) {\n                                const index = str.indexOf(':');\n                                const feature = str.slice(0, index);\n                                let v = str.slice(index + 2, str.length - 1);\n                                lastValue = new ValueFeature(feature, v);\n                                parent.AppendValue(lastValue);\n                            } else if (MatchStrangeNumber.test(str)) {\n                                lastValue = new ValueString(str);\n                                parent.AppendValue(lastValue);\n                            } else {\n                                throw new Error(\n                                    this._parse_error(data.line, `Invalid value '${str}'`),\n                                );\n                            }\n                            lastValue.Comments.SetComments(commentCache);\n                            commentCache = [];\n                            str = '';\n                            inQoute = false;\n                            startMark = false;\n                            expectedEnd = c !== ',' && c !== ']';\n                            if (c === ']') {\n                                data.pos -= 1;\n                            }\n                            continue;\n                        }\n                        str += c;\n                        continue;\n                    }\n                }\n\n                if (c === '/') {\n                    if (data.body[data.pos + 1] === '/') {\n                        const nextIndex = data.body.indexOf('\\n', data.pos + 2);\n                        if (isEndOfLineComment && lastValue) {\n                            lastValue.Comments.SetEndOfLineComment(\n                                data.body.slice(data.pos + 2, nextIndex).trimStart(),\n                            );\n                            isEndOfLineComment = false;\n                        } else {\n                            commentCache.push(data.body.slice(data.pos + 2, nextIndex).trimStart());\n                        }\n                        data.pos = nextIndex;\n                        data.line += 1;\n                        continue;\n                    } else if (data.body[data.pos + 1] === '*') {\n                        const nextIndex = data.body.indexOf('*/', data.pos + 2);\n                        const comment = data.body.slice(data.pos + 2, nextIndex).trim();\n                        if (comment.includes('\\n')) {\n                            commentCache.push(comment);\n                        } else {\n                            if (isEndOfLineComment && lastValue) {\n                                lastValue.Comments.SetEndOfLineComment(comment);\n                                isEndOfLineComment = false;\n                            } else {\n                                commentCache.push(comment);\n                            }\n                        }\n                        data.line += data.body.slice(data.pos, nextIndex).match(/\\n/g)?.length || 1;\n                        data.pos = nextIndex + 1;\n                        continue;\n                    }\n                }\n\n                if (expectedEnd) {\n                    if (isSpace) {\n                        continue;\n                    }\n                    if (c !== ',' && c !== ']') {\n                        throw new Error(this._parse_error(data.line, `Expected ',' or ']'`));\n                    }\n                    expectedEnd = false;\n                }\n                if (c === ',') {\n                    continue;\n                }\n\n                if (c === '{') {\n                    const child = new KeyValues3('', new ValueObject());\n                    data.pos += 1;\n                    data.tokenCounter += 1;\n                    this._parse(child, data);\n                    child.value.SetOwner(parent);\n                    parent.value.Append(child.value);\n                    str = '';\n                    inQoute = false;\n                    startMark = false;\n                    continue;\n                }\n\n                if (c === '[') {\n                    const child = new KeyValues3('', new ValueArray());\n                    data.pos += 1;\n                    data.tokenCounter += 1;\n                    this._parse(child, data);\n                    child.value.SetOwner(parent);\n                    parent.value.Append(child.value);\n                    str = '';\n                    inQoute = false;\n                    startMark = false;\n                    continue;\n                }\n\n                if (c === '}' || c === ']') {\n                    data.tokenCounter += 1;\n                    return;\n                }\n\n                if (isSpace) {\n                    continue;\n                }\n\n                startMark = true;\n                inQoute = c === '\"';\n                str = inQoute ? '' : c;\n                isEndOfLineComment = true;\n            }\n        } else {\n            throw Error(\"Parent's value must be an object or array\");\n        }\n    }\n\n    protected static _parse_error(line: number, msg: string) {\n        return `not readable as KeyValues3 text: Line ${line}: ${msg}`;\n    }\n\n    /**\n     * Load KeyValues3 from file\n     */\n    public static async Load(filename: string, encoding?: string): Promise<KeyValues3> {\n        const adapter = getKeyValuesAdapter();\n        const text = await adapter.readFile(filename, encoding);\n        if (text.charCodeAt(0) === 0xfeff) {\n            return this.Parse(text.slice(1), filename);\n        }\n        return this.Parse(text, filename);\n    }\n\n    /**\n     * Save KeyValues3 to file\n     */\n    public async Save(otherFilename?: string, encoding?: string): Promise<void> {\n        const filename = otherFilename ?? this.filename;\n        if (!filename) {\n            throw new Error('Not found filename in KeyValues3');\n        }\n        const adapter = getKeyValuesAdapter();\n        await adapter.writeFile(filename, this.Format(), encoding);\n    }\n}\n","import { promises } from 'fs';\nimport { resolve } from 'path';\nimport { KeyValues3Comments, KeyValuesComments } from './Comments';\nimport KeyValues from './KeyValues';\nimport KeyValues3 from './KeyValues3';\nimport { setKeyValuesAdapter } from './adapter';\n\nconst { readFile, writeFile } = promises;\n\nexport * from './adapter';\n\nexport { KeyValues, KeyValues3, KeyValues3Comments, KeyValuesComments };\n\nsetKeyValuesAdapter({\n    async readFile(path, encoding = 'utf8') {\n        return await readFile(path, encoding as BufferEncoding);\n    },\n    async writeFile(path, data, encoding = 'utf8') {\n        await writeFile(path, data, encoding as BufferEncoding);\n    },\n    resolvePath(filename, basePath) {\n        return resolve(filename, '../' + basePath);\n    },\n    createKeyValuesID() {\n        return '';\n    },\n});\n"],"names":["createID","promises","resolve"],"mappings":"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"}